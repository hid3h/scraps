// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  scrapPostings ScrapPosting[]
  scrapCommentings ScrapCommenting[]

  createdAt DateTime @default(now()) @map("created_at")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
}

model ScrapPosting {
  id String @id @default(cuid())
  title String
  postedAt DateTime @map("posted_at")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  scrapCommentings ScrapCommenting[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("scrap_postings")
}

model ScrapCommenting {
  id String @id @default(cuid())
  body String
  commentedAt DateTime @map("commented_at")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  scrapPosting ScrapPosting @relation(fields: [scrapPostingId], references: [id])
  scrapPostingId String @map("scrap_posting_id")
  scrapCommentDeletings ScrapCommentDeleting[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("scrap_commentings")
}

model ScrapCommentDeleting {
  id String @id @default(cuid())
  deletedAt DateTime @map("deleted_at")

  scrapCommenting ScrapCommenting @relation(fields: [scrapCommentingId], references: [id])
  scrapCommentingId String @map("scrap_commenting_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("scrap_comment_deletings")
}
